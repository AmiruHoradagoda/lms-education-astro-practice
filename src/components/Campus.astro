---
// Campus.astro
const campusImages = [
  {
    id: 1,
    imageUrl: "/campus-imgs/image1.png",
    alt: "Student studying outdoors with laptop",
    caption: "Outdoor Learning Environment",
  },
  {
    id: 2,
    imageUrl: "/campus-imgs/image2.png",
    alt: "Students collaborating in modern classroom",
    caption: "Collaborative Learning Spaces",
  },
  {
    id: 3,
    imageUrl: "/campus-imgs/image3.png",
    alt: "Student with headphones studying",
    caption: "Focused Study Environment",
  },
  {
    id: 4,
    imageUrl: "/campus-imgs/image4.png",
    alt: "Student reading in library",
    caption: "Library & Research Facilities",
  },
];
---

<section class="campus-section">
  <div class="container">
    <div class="section-header">
      <h2>Campus</h2>
      <div class="underline"></div>
    </div>

    <div class="campus-gallery">
      {
        campusImages.map((image, index) => (
          <div
            class="campus-image-container"
            data-aos="fade-up"
            data-aos-delay={index * 100}
          >
            <div class="image-wrapper">
              <img
                src={image.imageUrl}
                alt={image.alt}
                class="campus-image"
                loading="lazy"
              />
              <div class="image-overlay">
                <div class="overlay-content">
                  <h3 class="image-caption">{image.caption}</h3>
                  <button class="view-btn" data-image-id={image.id}>
                    <svg
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                    >
                      <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z" />
                      <circle cx="12" cy="12" r="3" />
                    </svg>
                    View
                  </button>
                </div>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>

  <!-- Image Modal -->
  <div class="modal" id="image-modal">
    <div class="modal-backdrop"></div>
    <div class="modal-content">
      <button class="modal-close" aria-label="Close modal">
        <svg
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
      <img class="modal-image" src="" alt="" />
      <div class="modal-caption"></div>
    </div>
  </div>
</section>

<style>
  .campus-section {
    padding: 4rem 2rem;
    background: white;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      sans-serif;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
  }

  .section-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .section-header h2 {
    font-size: 2.5rem;
    color: #333;
    margin: 0 0 1rem 0;
    font-weight: 600;
  }

  .underline {
    width: 60px;
    height: 3px;
    background: linear-gradient(90deg, #ffc107, #ff9800);
    margin: 0 auto;
    border-radius: 2px;
  }

  .campus-gallery {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 0;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  }

  .campus-image-container {
    position: relative;
    aspect-ratio: 16/9;
    overflow: hidden;
  }

  .image-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .campus-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }

  .image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.4));
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .campus-image-container:hover .image-overlay {
    opacity: 1;
  }

  .campus-image-container:hover .campus-image {
    transform: scale(1.1);
  }

  .overlay-content {
    text-align: center;
    color: white;
    padding: 1rem;
  }

  .image-caption {
    font-size: 1.1rem;
    font-weight: 600;
    margin: 0 0 1rem 0;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
  }

  .view-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 2px solid white;
    padding: 0.5rem 1rem;
    border-radius: 25px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.9rem;
    font-weight: 500;
    backdrop-filter: blur(10px);
  }

  .view-btn:hover {
    background: white;
    color: #333;
    transform: translateY(-2px);
  }

  .view-btn svg {
    width: 16px;
    height: 16px;
  }

  /* Modal Styles */
  .modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }

  .modal.active {
    opacity: 1;
    visibility: visible;
  }

  .modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(5px);
  }

  .modal-content {
    position: relative;
    max-width: 90vw;
    max-height: 90vh;
    background: white;
    border-radius: 10px;
    overflow: hidden;
    transform: scale(0.8);
    transition: transform 0.3s ease;
  }

  .modal.active .modal-content {
    transform: scale(1);
  }

  .modal-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 10;
    transition: background 0.3s ease;
  }

  .modal-close:hover {
    background: rgba(0, 0, 0, 0.8);
  }

  .modal-close svg {
    width: 20px;
    height: 20px;
  }

  .modal-image {
    width: 100%;
    height: auto;
    max-height: 70vh;
    object-fit: contain;
  }

  .modal-caption {
    padding: 1rem;
    font-size: 1.1rem;
    font-weight: 600;
    color: #333;
    text-align: center;
    background: #f8f9fa;
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .campus-gallery {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    .campus-section {
      padding: 3rem 1rem;
    }

    .section-header h2 {
      font-size: 2rem;
    }

    .campus-gallery {
      grid-template-columns: repeat(2, 1fr);
      gap: 2px;
    }

    .image-caption {
      font-size: 1rem;
    }

    .view-btn {
      padding: 0.4rem 0.8rem;
      font-size: 0.8rem;
    }
  }

  @media (max-width: 480px) {
    .campus-gallery {
      grid-template-columns: 1fr;
    }

    .section-header h2 {
      font-size: 1.8rem;
    }
  }

  /* Animation for scroll reveal */
  [data-aos="fade-up"] {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.6s ease;
  }

  [data-aos="fade-up"].aos-animate {
    opacity: 1;
    transform: translateY(0);
  }
</style>

<script>
  function initCampusGallery() {
    const modal = document.getElementById("image-modal") as HTMLElement;
    const modalImage = modal.querySelector(".modal-image") as HTMLImageElement;
    const modalCaption = modal.querySelector(".modal-caption") as HTMLElement;
    const modalClose = modal.querySelector(".modal-close") as HTMLElement;
    const modalBackdrop = modal.querySelector(".modal-backdrop") as HTMLElement;
    const viewButtons = document.querySelectorAll(".view-btn");

    if (!modal || !modalImage || !modalCaption) return;

    // Campus images data (should match the Astro data)
    const campusData = [
      {
        id: 1,
        imageUrl: "/campus-imgs/image1.png",
        alt: "Student studying outdoors with laptop",
        caption: "Outdoor Learning Environment",
      },
      {
        id: 2,
        imageUrl: "/campus-imgs/image2.png",
        alt: "Students collaborating in modern classroom",
        caption: "Collaborative Learning Spaces",
      },
      {
        id: 3,
        imageUrl: "/campus-imgs/image3.png",
        alt: "Student with headphones studying",
        caption: "Focused Study Environment",
      },
      {
        id: 4,
        imageUrl: "/campus-imgs/image4.png",
        alt: "Student reading in library",
        caption: "Library & Research Facilities",
      },
    ];

    // Open modal
    viewButtons.forEach((button) => {
      button.addEventListener("click", (e) => {
        e.stopPropagation();
        const imageId = parseInt(
          (button as HTMLElement).dataset.imageId || "1"
        );
        const imageData = campusData.find((img) => img.id === imageId);

        if (imageData) {
          modalImage.src = imageData.imageUrl;
          modalImage.alt = imageData.alt;
          modalCaption.textContent = imageData.caption;
          modal.classList.add("active");
          document.body.style.overflow = "hidden";
        }
      });
    });

    // Close modal
    function closeModal() {
      modal.classList.remove("active");
      document.body.style.overflow = "";
    }

    modalClose.addEventListener("click", closeModal);
    modalBackdrop.addEventListener("click", closeModal);

    // Close on Escape key
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && modal.classList.contains("active")) {
        closeModal();
      }
    });

    // Simple scroll animation
    function initScrollAnimation() {
      const observerOptions = {
        threshold: 0.1,
        rootMargin: "0px 0px -50px 0px",
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("aos-animate");
          }
        });
      }, observerOptions);

      document.querySelectorAll("[data-aos]").forEach((el) => {
        observer.observe(el);
      });
    }

    initScrollAnimation();
  }

  // Initialize when DOM is ready
  if (typeof window !== "undefined") {
    document.addEventListener("DOMContentLoaded", initCampusGallery);
  }
</script>

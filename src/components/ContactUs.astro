---
// ContactUs.astro
export interface Props {
  title?: string;
  subtitle?: string;
  backgroundColor?: string;
}

const {
  title = "Contact us",
  subtitle = "Feel free to contact us at anytime about our courses and tutorials.",
  backgroundColor = "#2c2c2c",
} = Astro.props;
---

<section class="contact-section" style={`background-color: ${backgroundColor}`}>
  <div class="container">
    <div class="contact-header">
      <h2>{title}</h2>
      <p class="subtitle">{subtitle}</p>
      <div class="underline"></div>
    </div>

    <form class="contact-form" id="contact-form">
      <div class="form-group">
        <label for="name" class="form-label">Name</label>
        <div class="input-container">
          <svg
            class="input-icon"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
            <circle cx="12" cy="7" r="4"></circle>
          </svg>
          <input
            type="text"
            id="name"
            name="name"
            class="form-input"
            required
            aria-describedby="name-error"
          />
        </div>
        <span class="error-message" id="name-error"></span>
      </div>

      <div class="form-group">
        <label for="email" class="form-label">Email *</label>
        <div class="input-container">
          <svg
            class="input-icon"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path
              d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"
            ></path>
            <polyline points="22,6 12,13 2,6"></polyline>
          </svg>
          <input
            type="email"
            id="email"
            name="email"
            class="form-input"
            required
            aria-describedby="email-error"
          />
        </div>
        <span class="error-message" id="email-error"></span>
      </div>

      <div class="form-group">
        <label for="message" class="form-label">Message *</label>
        <textarea
          id="message"
          name="message"
          class="form-textarea"
          rows="5"
          required
          aria-describedby="message-error"
          placeholder="Enter your message here..."></textarea>
        <span class="error-message" id="message-error"></span>
      </div>

      <button type="submit" class="submit-btn">
        <span class="btn-text">Send</span>
        <svg
          class="btn-icon"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <line x1="22" y1="2" x2="11" y2="13"></line>
          <polygon points="22,2 15,22 11,13 2,9 22,2"></polygon>
        </svg>
      </button>

      <div class="form-status" id="form-status"></div>
    </form>
  </div>
</section>

<style>
  .contact-section {
    padding: 4rem 2rem;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      sans-serif;
    color: white;
  }

  .container {
    max-width: 600px;
    margin: 0 auto;
  }

  .contact-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .contact-header h2 {
    font-size: 2.5rem;
    font-weight: 600;
    margin: 0 0 1rem 0;
    color: white;
  }

  .subtitle {
    font-size: 1rem;
    color: #ccc;
    margin: 0 0 1.5rem 0;
    line-height: 1.5;
  }

  .underline {
    width: 80px;
    height: 3px;
    background: linear-gradient(90deg, #ffc107, #ff9800);
    margin: 0 auto;
    border-radius: 2px;
  }

  .contact-form {
    background: rgba(255, 255, 255, 0.95);
    padding: 2.5rem;
    border-radius: 15px;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
    color: #333;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-label {
    display: block;
    font-size: 0.9rem;
    font-weight: 500;
    color: #555;
    margin-bottom: 0.5rem;
  }

  .input-container {
    position: relative;
  }

  .input-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    width: 18px;
    height: 18px;
    color: #999;
    z-index: 2;
  }

  .form-input,
  .form-textarea {
    width: 100%;
    padding: 1rem 1rem 1rem 3rem;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    font-size: 1rem;
    transition: all 0.3s ease;
    background: white;
    color: #333;
    box-sizing: border-box;
  }

  .form-textarea {
    padding-left: 1rem;
    resize: vertical;
    min-height: 120px;
    font-family: inherit;
  }

  .form-input:focus,
  .form-textarea:focus {
    outline: none;
    border-color: #00bcd4;
    box-shadow: 0 0 0 3px rgba(0, 188, 212, 0.1);
  }

  .form-input:focus + .input-icon {
    color: #00bcd4;
  }

  .error-message {
    display: block;
    color: #e74c3c;
    font-size: 0.8rem;
    margin-top: 0.3rem;
    min-height: 1rem;
  }

  .submit-btn {
    width: 100%;
    background: linear-gradient(135deg, #00bcd4, #26c6da);
    color: white;
    border: none;
    padding: 1rem 2rem;
    border-radius: 8px;
    font-size: 1.1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    box-shadow: 0 4px 15px rgba(0, 188, 212, 0.3);
  }

  .submit-btn:hover {
    background: linear-gradient(135deg, #0097a7, #00acc1);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 188, 212, 0.4);
  }

  .submit-btn:active {
    transform: translateY(0);
  }

  .submit-btn:disabled {
    background: #ccc;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  .btn-icon {
    width: 18px;
    height: 18px;
    transition: transform 0.3s ease;
  }

  .submit-btn:hover .btn-icon {
    transform: translateX(3px);
  }

  .form-status {
    margin-top: 1rem;
    padding: 0.75rem;
    border-radius: 6px;
    font-size: 0.9rem;
    text-align: center;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .form-status.success {
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
    opacity: 1;
  }

  .form-status.error {
    background: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
    opacity: 1;
  }

  .form-status.loading {
    background: #d1ecf1;
    color: #0c5460;
    border: 1px solid #bee5eb;
    opacity: 1;
  }

  @media (max-width: 768px) {
    .contact-section {
      padding: 3rem 1rem;
    }

    .contact-header h2 {
      font-size: 2rem;
    }

    .contact-form {
      padding: 2rem;
    }

    .form-input,
    .form-textarea {
      padding: 0.875rem 0.875rem 0.875rem 2.75rem;
    }

    .form-textarea {
      padding-left: 0.875rem;
    }
  }

  @media (max-width: 480px) {
    .contact-header h2 {
      font-size: 1.8rem;
    }

    .contact-form {
      padding: 1.5rem;
    }
  }
</style>

<script>
  function initContactForm() {
    const form = document.getElementById("contact-form") as HTMLFormElement;
    const submitBtn = form.querySelector(".submit-btn") as HTMLButtonElement;
    const formStatus = document.getElementById("form-status") as HTMLElement;

    if (!form || !submitBtn || !formStatus) return;

    // Form validation
    function validateField(
      field: HTMLInputElement | HTMLTextAreaElement
    ): boolean {
      const errorElement = document.getElementById(
        `${field.name}-error`
      ) as HTMLElement;
      let isValid = true;
      let errorMessage = "";

      // Clear previous error
      errorElement.textContent = "";
      field.style.borderColor = "#e0e0e0";

      // Check if required field is empty
      if (field.hasAttribute("required") && !field.value.trim()) {
        isValid = false;
        errorMessage = `${field.name.charAt(0).toUpperCase() + field.name.slice(1)} is required`;
      }

      // Email validation
      if (field.type === "email" && field.value.trim()) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(field.value.trim())) {
          isValid = false;
          errorMessage = "Please enter a valid email address";
        }
      }

      // Show error if invalid
      if (!isValid) {
        errorElement.textContent = errorMessage;
        field.style.borderColor = "#e74c3c";
      }

      return isValid;
    }

    // Real-time validation
    const formFields = form.querySelectorAll("input, textarea") as NodeListOf<
      HTMLInputElement | HTMLTextAreaElement
    >;
    formFields.forEach((field) => {
      field.addEventListener("blur", () => validateField(field));
      field.addEventListener("input", () => {
        if (field.style.borderColor === "rgb(231, 76, 60)") {
          // If field was invalid
          validateField(field);
        }
      });
    });

    // Form submission
    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      // Validate all fields
      let isFormValid = true;
      formFields.forEach((field) => {
        if (!validateField(field)) {
          isFormValid = false;
        }
      });

      if (!isFormValid) {
        showStatus("Please fix the errors above", "error");
        return;
      }

      // Show loading state
      submitBtn.disabled = true;
      submitBtn.querySelector(".btn-text")!.textContent = "Sending...";
      showStatus("Sending your message...", "loading");

      try {
        // Get form data
        const formData = new FormData(form);
        const data = {
          name: formData.get("name"),
          email: formData.get("email"),
          message: formData.get("message"),
        };

        // Simulate API call (replace with your actual endpoint)
        await new Promise((resolve) => setTimeout(resolve, 2000));

        // You can replace this with your actual form submission logic
        console.log("Form data:", data);

        // Success
        showStatus(
          "Message sent successfully! We'll get back to you soon.",
          "success"
        );
        form.reset();
      } catch (error) {
        showStatus("Failed to send message. Please try again.", "error");
      } finally {
        // Reset button state
        submitBtn.disabled = false;
        submitBtn.querySelector(".btn-text")!.textContent = "Send";
      }
    });

    function showStatus(
      message: string,
      type: "success" | "error" | "loading"
    ) {
      formStatus.textContent = message;
      formStatus.className = `form-status ${type}`;

      if (type !== "loading") {
        setTimeout(() => {
          formStatus.style.opacity = "0";
        }, 5000);
      }
    }
  }

  // Initialize when DOM is ready
  if (typeof window !== "undefined") {
    document.addEventListener("DOMContentLoaded", initContactForm);
  }
</script>